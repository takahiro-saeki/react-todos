import React from 'react';
import ReactDOM from 'react-dom';
/*
class App extends React.Component {
constructor(props) {
super(props);
this.state = {
userInput: '',
test: 'デフォルト'
}
this.handleChange = this.handleChange.bind(this);
this.clearAndFocusInput = this.clearAndFocusInput.bind(this);
this.tests = this.tests.bind(this);
this.addSet = this.addSet.bind(this);
}
handleChange(e) {
this.setState({userInput: e.target.value})
}
clearAndFocusInput() {
console.log(this.refs)
console.log(this.refs.theInput)
this.setState({userInput: ''}, () => this.refs.theInput.focus());
}
tests(e) {
console.log(e.target.value)
this.setState({test: e.target.value + 'hohoho'})
}
addSet() {
this.setState({test: 'hogeeee'});
}
render() {
return (
<div>
<h2 onClick={this.addSet}>
クリック！！！
</h2>
<div onClick={this.clearAndFocusInput}>
クリックすると、フォーカスして値をリセット
</div>
<input
ref="theInput"
value={this.state.userInput}
onChange={this.handleChange}
/>
<input
ref="test"
value={this.state.test}
onChange={this.tests}
/>
</div>
);
}
}
*/
/*
var App = React.createClass({
getInitialState: function() {
return {userInput: ''};
},
handleChange: function(e) {
this.setState({userInput: e.target.value});
},
clearAndFocusInput: function() {
// inputをクリア
this.setState({userInput: ''}, function() {
// このコードは、コンポーネントの再描画後に実行されます。
this.refs.theInput.focus();   // フォーカスされました！
});
},
render: function() {
return (
<div>
<div onClick={this.clearAndFocusInput}>
クリックすると、フォーカスして値をリセット
</div>
<input
ref="theInput"
value={this.state.userInput}
onChange={this.handleChange}
/>
</div>
);
}
});
*/
/*
import marked from 'marked';

class CommentBox extends React.Component {
render() {
return (
<div className="commentBox">
<h1>Comments</h1>
<CommentList data={this.props.data} />
<CommentForm />
</div>
)
}
}

class CommentList extends React.Component {
render() {
var commentNodes = this.props.data.map(function (comment) {
return (
<Comment author={comment.author}>{comment.text}</Comment>
);
});
return (
<div className="commentList">{commentNodes}</div>
)
}
}

class CommentForm extends React.Component {
render() {
return (
<div className="commentForm">
Hello, world! I am a CommentForm.
</div>
)
}
}

class Comment extends React.Component {
rawMarkup() {
var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
return { __html: rawMarkup };
}

render() {
return (
<div className="comment">
<h2 className="commentAuthor">{this.props.author}</h2>
<span dangerouslySetInnerHTML={this.rawMarkup()} />
</div>
)
}
}

const data = [
{author: "takahiro", text: "hiro"},
{author: "saeki", text: "saeeeeki"}
];
*/

var Comment = React.createClass({
  rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <div className="comment">
      <h2 className="commentAuthor">
      {this.props.author}
      </h2>
      <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </div>
    );
  }
});

var CommentBox = React.createClass({
  loadCommentsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="commentBox">
      <h1>Comments</h1>
      <CommentList data={this.state.data} />
      <CommentForm onCommentSubmit={this.handleCommentSubmit} />
      </div>
    );
  }
});

var CommentList = React.createClass({
  render: function() {
    var commentNodes = this.props.data.map(function(comment) {
      return (
        <Comment author={comment.author} key={comment.id}>
        {comment.text}
        </Comment>
      );
    });
    return (
      <div className="commentList">
      {commentNodes}
      </div>
    );
  }
});

var CommentForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function() {
    return (
      <form className="commentForm" onSubmit={this.handleSubmit}>
      <input
      type="text"
      placeholder="Your name"
      value={this.state.author}
      onChange={this.handleAuthorChange}
      />
      <input
      type="text"
      placeholder="Say something..."
      value={this.state.text}
      onChange={this.handleTextChange}
      />
      <input type="submit" value="Post" />
      </form>
    );
  }
});
ReactDOM.render(
  <CommentBox url="/api/comments" pollInterval={2000} />,
  document.getElementById('app')
);
